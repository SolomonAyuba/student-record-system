#include <ctype.h>      // C library for character handling character functions.
#include <stdio.h>      // C library for input/output functions
#include <string.h>     // C library for string handling functions like 'strcpy' and 'strcat'
#include <stdlib.h>     // C library for Dynamic Memory Allocation. Used in this code to free memory when not in use
/*
 * C preprocessor directive used to define macros. Used to create a constant of 10 students as starting capcity for
 * dynamic memory allocation
 */
#define STARTING_CAPACITY 10
    /*
     * The Struct function stores groups of various data types for various student. I call it Array on steriods.
     * Struct: is a C data structure initialized to store groups of data types for various students info.
     * We declare various variable and data-type as needed in the program.
     */
typedef struct {
    char firstName[15];     // allocates 15 character memory space for student's first name input
    char lastName[15];      // allocates 15 character memory space for student's last name input
    char userName[30];      // allocates 30 character memory space for both first and last name
    int rollNumber;         // integer for storing Students Roll Number
    int marks[8];           // array for storing Marks for 8 Courses
    char courses[8][50];    // array for storing names of 8 Courses, allocating 50 character memory space for each
    int passMark;           // integer for storing Pass Mark
} Student;
    /*
     * This function assigns character strings to the courses variable declared in the Struct above.
     * We define the title of the 8 courses as intended for this program
     */
void labelCourses(char courses[8][50]) {
    strcpy(courses[0], "Intro to Data Science");
    strcpy(courses[1], "Intro to R Programming");
    strcpy(courses[2], "Computer Programming I");
    strcpy(courses[3], "Discrete Structures");
    strcpy(courses[4], "Intro to Numerical Analysis");
    strcpy(courses[5], "Mathematical Methods I");
    strcpy(courses[6], "Sets, Logic & Algebra");
    strcpy(courses[7], "Entrepreneurship");
}
    /*
     * This function employs the use of a pointer and prompts the Student to enter Firstname, Lastname, Roll Number and
     * Marks for the 8 courses.
     * We concatenate the inputed First and Lastname then assign the values to the variable Username
     * The student is then welcomed and greeted by their Username
     * We prompt the user to enter a 4-digit roll Number which is validated before proceeding
     * We display the 8 courses and prompt the user to enter value for each using a for loop
    */
void inputStudentData(Student *student) {

    printf("\nFirst Name: ");
    fgets(student->firstName, 15, stdin);
    student->firstName[strcspn(student->firstName, "\n")] = '\0'; // removes added newline space if present

    printf("Last Name: ");
    fgets(student->lastName, 15, stdin);
    student->lastName[strcspn(student->lastName, "\n")] = '\0';  // removes added newline space if present

    strcpy(student->userName, student->firstName);
    strcat(student->userName, " ");
    strcat(student->userName, student->lastName);

    printf("\nGood day, %s!\n", student->userName);

    // The user is asked for a 4-digit Roll Number which is then validated.
    while (1) {
        printf("\nPlease enter your 4-digit Roll Number: ");
        scanf("%d", &student->rollNumber);
        getchar(); // this function consumes leftover \n (newline) character after the Roll Number is entered
        // Roll Number Validation
        if(student->rollNumber >= 0001 && student->rollNumber <= 9999) {
            break;
        } else {
            printf("\nOops! Invalid Roll Number. Please enter a valid 4-digit Number.\n");
        }
    }

    labelCourses(student->courses); // displays courses while executing the next line

    // Prompts user for the Mark of all 8 courses.
    printf("\nWhat's your score for the following 8 courses (0-100):\n");

    for (int i = 0; i < 8; i++) {
        printf("[%d] %s: ", i + 1, student->courses[i]);
        scanf("%d", &student->marks[i]);
    }
    getchar();  // This function Consumes the leftover \n (newline) character after the student enters their marks
}
    /*
     * This function allows for multilple student's record to be entered.
     * Pointers are used for Dynamic Memory allocation to keep track of the Student Count and Capacity
     * We utilized the realloc() function to increase the STARTING_CAPACITY in the event several students are added
     * The initial inputStudentData function is called upon and execution here, then iterated and its valued returned
     */
Student *addStudent(Student *students, int *studentCount, int *capacity) {
    if (*studentCount >= *capacity) {
        *capacity *= 2;
        students = realloc(students, (*capacity) * sizeof(Student));
        if (students == NULL) {
            printf("\nOops! Memory allocation failed.\n");
            exit(1);
        }
    }
    inputStudentData(&students[*studentCount]);
    (*studentCount)++;
    return students;
}
    /*
     * This function allows users to remove existing students from the existing record by their Roll Number.
     * The user gets an error message if an invalid Roll Number is entered.
     * Upon removal of a student a success message is displayed
     */
void removeStudent(Student students[], int *studentCount, int rollNumber) {
    int index = -1;
    for (int i = 0; i < *studentCount; i++) {
        if (students[i].rollNumber == rollNumber) {
            index = i;
            break;
        }
    }
    if (index == -1) {
        printf("\nOop! The Student with the roll number %d doesn't exist on our record.\n", rollNumber);
        return;
    }
    for (int i = index; i < *studentCount - 1; i++) {
        students[i] = students[i+1];
    }
    (*studentCount)--;
    printf("\nSuccess! The Student with the roll number %d has been removed.\n", rollNumber);
}
    /*
     * This function modifies an existing student's record using the Roll Number
     * An error message is displayed if the user enters an invalid Roll Number
     * A status update message is shown while the user modifies the student's Record
     * The inputStudentData funtion is called upon to prompt and store the modified changes
     */
void modifyStudent(Student students[], int studentCount, int rollNumber) {
    int index = -1;
    for (int i = 0; i < studentCount; i++) {
        if (students[i].rollNumber == rollNumber) {
            index = 1;
            break;
        }
    }
    if (index == -1) {
        printf("\nOops! The Student with the roll number %d doesn't exist on our record.\n", rollNumber);
        return;
    } else {
        printf("\nModifying student with the roll number %d:\n", rollNumber);
        inputStudentData(&students[index]);
    }
}
    /*
     * This function displays students result.
     * The Student Number, username, Roll Number, and Result status is displayed in an organized fashion
     * Students who score above 39 are award a pass remark, else a failed remark.
     */
void displayStudentResults(Student *student) {
    printf("\n   Fullname: %s \n   Roll Number: %d\nSEMESTER RESULT\n", student->userName, student->rollNumber);
    student->passMark = 40;     // Declaring the pass Mark as 40
    // Iteration using for loop to display all 8 courses Marks
    for (int i = 0; i < 8; i++) {
        if (student->marks[i] >= student->passMark) {
            printf("  Score = %d  ✅\tHurray! you passed: %s\n", student->marks[i], student->courses[i]);
        } else {
            printf("  Score = %d  ❌\tSorry, you failed: %s\n", student->marks[i], student->courses[i]);
        }
    }
}
    /*
     * This function writes/saves the Students Record (Full Name, Roll Number, and Marks) to a .txt file.
     */
void saveToFile(Student *students, int studentCount, const char* filename) {
    FILE* file = fopen(filename, "w");
    if(file == NULL) {
        printf("Oops! Could not open file for writing.\n");
        return;
    }
    for (int i = 0; i < studentCount; i++) {
        fprintf(file, "%s %s %d", students[i].firstName, students[i].lastName, students[i].rollNumber);
        for (int j = 0; j < 8; j++) {
            fprintf(file, " %d", students[i].marks[j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
}
    /*
     * This function reads/loads the student record from a .txt file
     */
void loadFromFile(Student **students, int *studentCount, int *capacity, const char *filename) {
    FILE* file = fopen(filename, "r");
    if(file == NULL) {
        printf("\nOops! Could not open file for reading.\n");
        return;
    }
    while (1) {
        if (*studentCount >= *capacity) {
            *capacity *= 2;
            *students = realloc(*students, (*capacity) * sizeof(Student));
            if (*students == NULL) {
                printf("\nOop! Memory allocation failed.\n");
                exit(1);
            }
        }
        Student *student = &(*students)[*studentCount];
        if(fscanf(file, "%14s %14s %d", student->firstName, student->lastName, &student->rollNumber) !=3) {
            break;
        }
        for (int i =0; i < 8; i++) {
            fscanf(file, "%d", &student->marks[i]);
        }
        strcpy(student->userName, student->firstName);
        strcat(student->userName, " ");
        strcat(student->userName, student->lastName);
        labelCourses(student->courses);
        (*studentCount)++;
    }
    fclose(file);
}
    /*
     * This function allows users to search for a student Record using their Roll Number
     * An error message is displayed if the user enters an invalid Roll Number
     */
void searchStudent (Student *students, int studentCount, int rollNumber) {
    for(int i = 0; i < studentCount; i++) {
        if (students[i].rollNumber == rollNumber) {
            printf("\nWe found this student, isn't that nice! \n\nSTUDENT'S INFORMATION");
            displayStudentResults(&students[i]);
            return;
        }
    }
    printf("\nOop! The Roll Number %d isn't assigned to a student yet. Try again!\n", rollNumber);
}
    /*
     * This function calculates and displays the Average Marks for all students.
     * An error message is entered is there's no student to calculate average mark for.
     * The average marks is displayed in floating point value once there are students records
     */
void calculateAverageMarks(Student *students, int studentCount) {
    if (studentCount == 0) {
        printf("\nOop! You need to provide atleast 2 students to calculate the average mark.\n");
        return;
    }
    int totalMarks[8] = {0};
    for (int i = 0; i < studentCount; i++) {
        for (int j = 0; j < 8; j++) {
            totalMarks[j] += students[i].marks[j];
        }
    }
    printf("\nAVERAGE MARKS OF ALL STUDENT FOR EACH COURSE:\n");
    for (int j = 0; j < 8; j++) {
        printf("  %s: %.2f\n", students[0].courses[j], (float)totalMarks[j] / studentCount);
    }
}
    /*
     * This function calculates the Total Marks a student gets in preparation for the function that sorts
     * and displays the Marks in ascending/descending order
    */
int getTotalMarks(Student *student) {
    int total = 0;
    for (int i = 0; i < 8; i++) {
        total += student->marks[i];
    }
    return total;
}
     // This function enables sorting the student's Marks in an ↑ Ascending Order
int compareAscending(const void *a, const void *b) {
    Student* studentA = (Student*)a;
    Student* studentB = (Student*)b;
    return getTotalMarks(studentA) - getTotalMarks(studentB);
}
    // This function enables sorting the student's Marks in a ↓ Descending Order
int compareDescending(const void *a, const void *b) {
    Student* studentA = (Student*)a;
    Student* studentB = (Student*)b;
    return getTotalMarks(studentB) - getTotalMarks(studentA);
}
    /*
     * This function allows for sorting and displaying the records of students in the chosen order
     * If there are no students, an error message is displayed
     * Otherwise, the user is presented with the record in the chosen order
     */
void sortAndDisplayStudents(Student* students, int studentCount, int order) {
    if(studentCount == 0) {
        printf("\nOops! No students in the record to sort.\n");
        return;
    }
    if(order == 1) {
        qsort(students, studentCount, sizeof(Student), compareAscending);
        printf("\nSTUDENTS SORTED BY MARKS in ↑ ASCENDING ORDER:");
    } else if (order == 2) {
        qsort(students, studentCount, sizeof(Student), compareDescending);
        printf("\nSTUDENTS SORTED BY MARKS in ↓ DESCENDING ORDER:");
    }
    for (int i = 0; i < studentCount; i++) {
        displayStudentResults(&students[i]);
    }
}
    /*
     * This is main function that houses and drives the declared data structure, functions, dynamic memory allocation
     * file write-read functions, record search, calculaton and sorting functions etc.
     * The output of the program initiates in this function starting from displaying a welcome & the program name
     */
    int main(void){
        char programName[50] = "Interactive Student Record System v1.0";
        printf("Hello, Welcome to the %s\n", programName);
        /*
         * Using the malloc function from the #define preprocessor directive header, this section effects the dynamic
         * memory allocation as new students are added.
        */
        int capacity = STARTING_CAPACITY;
        Student* students = malloc(capacity * sizeof(Student));
        if (students == NULL) {
            printf("\nOop! Memory allocation failed. \n");
            return 1;
        }

        int studentCount = 0;   // The studentCount integer variable is initiated an assigned the value 0

        // The read file function to read the saved records from the file indicated - REVIEW THIS LINE OF CODE
       // loadFromFile(&students, &studentCount, &capacity, "StudentRecordSystem.txt");

        // While the use picks any of the listed options, the functions as declared prior is engaged and executed
        while (1) {
            printf("\nWould you like to:");
            printf("\n1. Add a New Student");
            printf("\n2. Remove Existing Student");
            printf("\n3. Modify Existing Student Record");
            printf("\n4. Display all Students");
            printf("\n5. Search for Existing Student by their Roll Number");
            printf("\n6. Display Average Marks of all Students per course");
            printf("\n7. Sort and Display Students by their Marks");
            printf("\n8. Save Student Record to File");
            printf("\n9. Load Student Record from File");
            printf("\n10. Quit\n");
            printf("\nChoose an option: ");

            int option;
            scanf("%d", &option);
            getchar(); // This function Consumes the leftover \n (newline) character after the student picks an option

            if (option == 1) {
                students = addStudent(students, &studentCount, &capacity);
            } else if(option == 2) {
                printf("Enter Roll Number of student to remove: ");
                int rollNumber;
                scanf("%d", &rollNumber);
                // This function Consumes the leftover \n (newline) character after the student enters their rollNumber
                getchar();
                removeStudent(students, &studentCount, rollNumber);
            } else if(option == 3) {
                printf("Enter Roll Number of student to modify: ");
                int rollNumber;
                scanf("%d", &rollNumber);
                // This function Consumes the leftover \n (newline) character after the student enters the rollNumber
                getchar();
                modifyStudent(students, studentCount, rollNumber);
            } else if(option == 4) {
                for(int i = 0; i < studentCount; i++) {
                    printf("\nSTUDENT INFORMATION\n   Student Number: %d", i + 1);
                    displayStudentResults(&students[i]);
                }
            } else if(option == 5){
                printf("\nWhat's the student's Roll Number: ");
                int rollNumber;
                scanf("%d", &rollNumber);
                // This function Consumes the leftover \n (newline) character after the student enters the rollNumber
                getchar();
                searchStudent(students, studentCount, rollNumber);
            } else if(option == 6) {
                calculateAverageMarks(students, studentCount);
            } else if(option == 7) {
                printf("\nCHOOSE SORTING ORDER:\n1. ↑ Ascending order\n2. ↓ Descending order\nORDER: ");
                int order;
                scanf("%d", &order);
                // This function Consumes the leftover \n (newline) character after the user enters the order choice
                getchar();
                sortAndDisplayStudents(students, studentCount, order);
            } else if(option == 8) {
                saveToFile(students, studentCount, "StudentRecordSystem.txt");
                printf("\nSuccess!✅ Student Record saved to SystemRecordSystem.txt file.\n");
            } else if(option == 9) {
                loadFromFile(&students, &studentCount, &capacity, "StudentRecordSystem.txt");
                printf("\nSuccess!✅ Student Record Loaded from SystemRecordSystem.txt file.\n");
            } else if(option == 10) {
                break;
            } else {
                printf("\nOpp! Invalid option. Please try again.\n");
            }
        }
        free(students); // Dynamic memory allocation function to free memory when no longer needed.
        /*
         * Upon selecting Quit, the user gets the a sum of the total number of students on the Record System
         * followed by a thank your message.
         * The name of Group 6 members who worked on this program is listed, alongside the course, lecturer,
         * department and institution.
        */
        printf("\n🎊Hurray!🎊 you registered '%d' number of student.\n\nThank you for using our %s Software\n"
               "\n© Solomon Ayuba | Okong Olugbenga Enang | Abel Odiri Odemudia | Christiana Chatt Richards "
               "| Olufemi Adesope"
               "\nData Science Department \nComputer Programming I (Group 6)\n"
               "Lecturer: Oluwatoyin Adelakun-Adeyemo  ", studentCount, programName);

        /*
         * I've reevaluated the code and given a detailed description/comment
         * Question 6: File operation, is the pending function yet to work 100% in the project
         * Although I implemented the read and write to .txt file function it doesn't work as intended.
         * You guys can take it up from here while we prepare for a virtual explanatory meeting before presentation.
         */
        return 0;
}